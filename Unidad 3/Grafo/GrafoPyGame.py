import math

import pygame
import sys


coordenadas = {0: (33, 33), 1: (102, 33), 2: (242, 33), 3: (405, 33), 4: (560, 33), 5: (102,120), 6: (285, 120),
               7: (494, 120), 8: (560, 163), 9: (33, 185), 10: (172, 185), 11: (33, 229), 12: (333, 229),
               13: (494, 229), 14: (33, 316), 15: (285, 316), 16: (560, 316), 17: (172, 359), 18: (285, 359),
               19: (380, 359), 20: (33, 469), 21: (172, 469), 22: (285, 469), 23: (473, 469), 24: (102, 577),
               25: (380, 577), 26: (560, 577), 27: (172, 686), 28: (380, 686)}

T_trayectorias = [
    [0, 1, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 1, 1, 9, 1, 1, 9, 9, 1, 9, 9, 9, 9, 1, 1, 1, 9, 1],
    [0, 1, 2, 2, 2, 5, 5, 5, 2, 0, 0, 0, 5, 5, 0, 5, 2, 0, 0, 5, 0, 0, 0, 0, 5, 5, 5, 0, 5],
    [1, 1, 2, 3, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1],
    [2, 2, 2, 3, 4, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 4, 4, 2, 4],
    [3, 3, 3, 3, 4, 3, 3, 3, 8, 3, 3, 3, 3, 3, 3, 8, 8, 3, 3, 8, 3, 3, 3, 3, 3, 8, 8, 8, 8],
    [1, 1, 1, 1, 1, 5, 6, 6, 1, 1, 1, 1, 6, 6, 1, 6, 6, 1, 1, 24, 1, 1, 1, 1, 24, 24, 24, 1, 24],
    [5, 5, 5, 5, 5, 5, 6, 7, 15, 5, 5, 7, 7, 7, 7, 15, 15, 5, 5, 5, 5, 5, 5, 5, 5, 5, 15, 5, 5],
    [6, 6, 6, 6, 6, 6, 6, 7, 6, 6, 6, 13, 13, 13, 13, 6, 6, 6, 6, 6, 13, 13, 6, 6, 6, 6, 6, 13, 6],
    [4, 4, 4, 4, 4, 4, 16, 16, 8, 4, 4, 4, 16, 16, 4, 16, 16, 4, 4, 16, 4, 4, 4, 4, 16, 16, 16, 16, 16],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 10, 0, 0, 10, 0, 0, 10, 10, 0, 10, 10, 10, 10, 0, 0, 0, 10, 10],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 17, 17, 9, 17, 9, 9, 17, 17, 17, 17, 17, 17, 17, 9, 17, 17, 17, 17],
    [14, 14, 14, 14, 14, 14, 12, 12, 14, 14, 14, 11, 12, 12, 14, 12, 12, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14],
    [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 12, 13, 11, 13, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 13, 11, 11],
    [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 12, 13, 12, 7, 7, 12, 12, 7, 12, 12, 12, 12, 7, 7, 7, 12, 12],
    [20, 20, 20, 20, 20, 20, 11, 11, 20, 20, 20, 11, 11, 11, 14, 11, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
    [6, 6, 6, 6, 16, 6, 6, 6, 16, 6, 6, 6, 6, 6, 6, 15, 16, 6, 6, 16, 6, 6, 6, 6, 6, 16, 16, 16, 16],
    [8, 8, 8, 8, 8, 15, 15, 15, 8, 8, 8, 15, 15, 15, 26, 15, 16, 8, 8, 26, 26, 26, 8, 8, 26, 26, 26, 26, 26],
    [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 21, 21, 21, 21, 10, 10, 17, 18, 21, 21, 21, 18, 18, 21, 21, 21, 21, 21],
    [17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 17, 17, 17, 22, 22, 17, 17, 17, 17, 17],
    [25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 19, 25, 25, 25, 25, 25, 25, 25, 25, 25],
    [21, 21, 21, 21, 21, 21, 21, 14, 21, 21, 21, 14, 14, 14, 14, 21, 21, 21, 21, 21, 20, 21, 21, 21, 21, 21, 21, 21, 21],
    [17, 17, 17, 17, 17, 17, 17, 20, 17, 17, 17, 20, 20, 20, 20, 17, 27, 17, 17, 27, 20, 21, 17, 17, 27, 27, 27, 27, 27],
    [18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 22, 23, 18, 18, 18, 18, 18],
    [22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 22, 22, 22, 22, 22],
    [5, 5, 5, 5, 5, 5, 5, 5, 25, 5, 5, 25, 5, 5, 25, 5, 25, 25, 25, 25, 25, 25, 25, 25, 24, 25, 25, 25, 25],
    [24, 24, 24, 26, 26, 24, 24, 24, 26, 24, 28, 28, 28, 24, 28, 26, 26, 28, 28, 19, 28, 28, 28, 28, 24, 25, 26, 28, 28],
    [25, 25, 16, 16, 16, 25, 16, 16, 16, 25, 25, 25, 16, 16, 25, 16, 16, 25, 25, 25, 25, 25, 25, 25, 25, 26, 25, 25],
    [21, 21, 21, 21, 28, 21, 21, 21, 28, 21, 21, 21, 21, 21, 21, 28, 28, 21, 21, 28, 21, 21, 21, 21, 28, 28, 28, 27, 28],
    [25, 25, 25, 25, 25, 25, 25, 25, 25, 27, 27, 27, 27, 27, 27, 25, 25, 27, 27, 25, 27, 27, 27, 27, 25, 25, 25, 27, 28]
]
M_distancias = [
    [0, 5, 13, 21, 29, 10, 25, 40, 39, 8, 20, 60, 58, 48, 55, 37, 51, 30, 40, 80, 45, 40, 50, 65, 45, 60, 70, 55, 70],
    [5, 0, 8, 16, 24, 5, 20, 35, 34, 13, 25, 65, 53, 43, 60, 32, 46, 35, 45, 75, 50, 45, 55, 70, 40, 55, 65, 60, 65],
    [13, 8, 0, 8, 16, 13, 28, 43, 26, 21, 33, 73, 61, 51, 68, 40, 38, 43, 53, 83, 58, 53, 63, 78, 48, 63, 63, 68, 73],
    [21, 16, 8, 0, 8, 21, 36, 51, 18, 29, 41, 81, 69, 59, 76, 48, 30, 51, 61, 85, 66, 61, 71, 86, 56, 65, 55, 76, 75],
    [29, 24, 16, 8, 0, 29, 44, 59, 10, 37, 49, 89, 77, 67, 84, 42, 22, 59, 69, 77, 74, 69, 79, 94, 64, 57, 47, 82, 67],
    [10, 5, 13, 21, 29, 0, 15, 30, 39, 18, 30, 70, 48, 38, 65, 27, 47, 40, 50, 70, 55, 50, 60, 75, 35, 50, 60, 65, 60],
    [25, 20, 28, 36, 44, 15, 0, 15, 44, 33, 45, 58, 33, 23, 63, 12, 32, 55, 65, 85, 70, 65, 75, 90, 50, 65, 57, 80, 75],
    [40, 35, 43, 51, 59, 30, 15, 0, 59, 48, 60, 43, 18, 8, 48, 27, 47, 70, 80, 100, 58, 63, 90, 105, 65, 80, 72, 78, 90],
    [39, 34, 26, 18, 10, 39, 44, 59, 0, 47, 59, 99, 77, 67, 94, 32, 12, 69, 79, 67, 84, 79, 89, 104, 62, 47, 37, 72, 57],
    [8, 13, 21, 29, 37, 18, 33, 48, 47, 0, 12, 52, 66, 56, 47, 45, 59, 22, 32, 88, 37, 32, 42, 57, 53, 68, 78, 47, 62],
    [20, 25, 33, 41, 49, 30, 45, 60, 59, 12, 0, 40, 65, 68, 35, 57, 71, 10, 20, 80, 25, 20, 30, 45, 65, 60, 70, 35, 50],
    [60, 65, 73, 81, 89, 70, 58, 43, 99, 52, 40, 0, 25, 35, 5, 70, 90, 30, 40, 80, 15, 20, 50, 65, 75, 60, 70, 35, 50],
    [58, 53, 61, 69, 77, 48, 33, 18, 77, 66, 65, 25, 0, 10, 30, 45, 65, 55, 65, 105, 40, 45, 75, 90, 83, 85, 90, 60, 75],
    [48, 43, 51, 59, 67, 38, 23, 8, 67, 56, 68, 35, 10, 0, 40, 35, 55, 65, 75, 108, 50, 55, 85, 100, 73, 88, 80, 70, 85],
    [55, 60, 68, 76, 84, 65, 63, 48, 94, 47, 35, 5, 30, 40, 0, 75, 90, 25, 35, 75, 10, 15, 45, 60, 70, 55, 65, 30, 45],
    [37, 32, 40, 48, 42, 27, 12, 27, 32, 45, 57, 70, 45, 35, 75, 0, 20, 67, 77, 75, 82, 77, 87, 102, 62, 55, 45, 80, 65],
    [51, 46, 38, 30, 22, 47, 32, 47, 12, 59, 71, 90, 65, 55, 90, 20, 0, 81, 91, 55, 80, 75, 101, 116, 50, 35, 25, 60, 45],
    [30, 35, 43, 51, 59, 40, 55, 70, 69, 22, 10, 30, 55, 65, 25, 67, 81, 0, 10, 70, 15, 10, 20, 35, 65, 50, 60, 25, 40],
    [40, 45, 53, 61, 69, 50, 65, 80, 79, 32, 20, 40, 65, 75, 35, 77, 91, 10, 0, 80, 25, 20, 10, 25, 75, 60, 70, 35, 50],
    [80, 75, 83, 85, 77, 70, 85, 100, 67, 88, 80, 80, 105, 108, 75, 75, 55, 70, 80, 0, 65, 60, 90, 105, 35, 20, 30, 45, 30],
    [45, 50, 58, 66, 74, 55, 70, 58, 84, 37, 25, 15, 40, 50, 10, 82, 80, 15, 25, 65, 0, 5, 35, 50, 60, 45, 55, 20, 35],
    [40, 45, 53, 61, 69, 50, 65, 63, 79, 32, 20, 20, 45, 55, 15, 77, 75, 10, 20, 60, 5, 0, 30, 45, 55, 40, 50, 15, 30],
    [50, 55, 63, 71, 79, 60, 75, 90, 89, 42, 30, 50, 75, 85, 45, 87, 101, 20, 10, 90, 35, 30, 0, 15, 85, 70, 80, 45, 60],
    [65, 70, 78, 86, 94, 75, 90, 105, 104, 57, 45, 65, 90, 100, 60, 102, 116, 35, 25, 105, 50, 45, 15, 0, 100, 85, 95, 60, 75],
    [45, 40, 48, 56, 64, 35, 50, 65, 62, 53, 65, 75, 83, 73, 70, 62, 50, 65, 75, 35, 60, 55, 85, 100, 0, 15, 25, 40, 25],
    [60, 55, 63, 65, 57, 50, 65, 80, 47, 68, 60, 60, 85, 88, 55, 55, 35, 50, 60, 20, 45, 40, 70, 85, 15, 0, 10, 25, 10],
    [70, 65, 63, 55, 47, 60, 57, 72, 37, 78, 70, 70, 90, 80, 65, 45, 25, 60, 70, 30, 55, 50, 80, 95, 25, 10, 20, 15, 0]
]
origen = 0
destino = None


def get_path(u, v):
    # Si no existe un camino, regresa None
    if T_trayectorias[u][v] == -1:
        return None

    # Inicio del camino
    path = [u]

    while u != v:
        u = T_trayectorias[u][v]
        path.append(u)

    return path


# Inicializar Pygame
pygame.init()

# Configuraci칩n de la pantalla
width, height = 600, 720
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Carrito Rutas")

# Im치gnes
background_image = pygame.image.load("Assets/ruta.jpg").convert()
original_player_image = pygame.image.load("Assets/coche.png").convert_alpha()


# Jugador
player_size = (50, 50)
player_image = pygame.transform.scale(original_player_image, player_size)
player_rect = player_image.get_rect()
player_rect.x = coordenadas[origen][0] - player_rect.width / 2
player_rect.y = coordenadas[origen][1] - player_rect.height / 2
player_speed = 1


# Botones
target = []
transparent_surface = pygame.Surface((20, 20), pygame.SRCALPHA)
for i in range(29):
    target.append(pygame.Rect((coordenadas[i][0] - 10), (coordenadas[i][1] - 10), 20, 20))

coord = [(player_rect.x, player_rect.y)]
pos = 0
flip = False

# Bucle principal del juego
while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        #     Obtener Ruta
        elif event.type == pygame.MOUSEBUTTONDOWN:
            mouse_x, mouse_y = pygame.mouse.get_pos()
            for index, rect in enumerate(target):
                if rect.collidepoint(mouse_x, mouse_y):
                    coord = []
                    print(f"Colisi칩n con el rect치ngulo {index}")
                    camino = get_path(origen, index)
                    print(camino)
                    origen = index
                    flip = True

                    for path in camino:
                        coord.append(((coordenadas[path][0] - player_rect.width / 2), (coordenadas[path][1] - player_rect.height / 2)))
                    print(coord)

    # Obtener la coordenada actual
    target_x, target_y = coord[pos]

    # Mover el objeto hacia la coordenada actual
    if player_rect.x < target_x:
        player_rect.x += player_speed
        if flip:
            flip = False
    elif player_rect.x > target_x:
        player_rect.x -= player_speed
        if flip:
            player_image = pygame.transform.flip(player_image, True, False)
            flip = False
    elif player_rect.y < target_y:
        player_rect.y += player_speed
        if flip:
            player_image = pygame.transform.rotate(player_image, 270)
            flip = False
    elif player_rect.y > target_y:
        player_rect.y -= player_speed
        if flip:
            player_image = pygame.transform.rotate(player_image, 90)
            flip = False

    # Verificar si el objeto ha alcanzado la coordenada actual
    if player_rect.x == target_x and player_rect.y == target_y:
        player_image = pygame.transform.scale(original_player_image, player_size)
        flip = True
        pos += 1
        print(pos)
        print(target_x, target_y)
    if pos == len(coord):
            pos = 0  # Reiniciar cuando se alcanzan todas las coordenadas
            coord = [(player_rect.x, player_rect.y)]

    # Dibujar elementos
    screen.blit(background_image, (0, 0))
    screen.blit(player_image, player_rect)
    for i in target:
        pygame.draw.rect(transparent_surface, (0, 0, 0, 0), i)

    # Config
    pygame.display.flip()
    pygame.time.Clock().tick(30)
